import numpy as np
import matplotlib.pyplot as plt
from sklearn.svm import SVC
from sklearn.ensemble import RandomForestClassifier
from sklearn.neighbors import KNeighborsClassifier
from sklearn.linear_model import LogisticRegression
from sklearn.neural_network import MLPClassifier
from sklearn.metrics import accuracy_score, precision_score, recall_score, f1_score, log_loss
from sklearn.model_selection import train_test_split
from sklearn.datasets import make_classification  # For the sake of example, using a toy dataset

# Example dataset (replace this with your actual vehicle dataset)
X, y = make_classification(n_samples=1000, n_features=20, n_classes=2, random_state=42)

# Split the data into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3, random_state=42)

# Define the models
models = {
    "SVM-Linear": SVC(kernel='linear'),
    "SVM-Polynomial": SVC(kernel='poly', degree=3, C=1),
    "Random Forest": RandomForestClassifier(n_estimators=100, random_state=42),
    "KNN": KNeighborsClassifier(n_neighbors=3),
    "Logistic Regression": LogisticRegression(),
    "Neural Network": MLPClassifier(hidden_layer_sizes=(100, 50), activation='relu', max_iter=1000)
}

# Store results
results = {
    'Model': [],
    'Accuracy': [],
    'Precision': [],
    'Recall': [],
    'F1 Score': [],
    'Loss': []
}

# Train and evaluate each model
for model_name, model in models.items():
    # Train the model
    model.fit(X_train, y_train)

    # Make predictions
    y_pred = model.predict(X_test)

    # Calculate metrics
    accuracy = accuracy_score(y_test, y_pred)
    precision = precision_score(y_test, y_pred)
    recall = recall_score(y_test, y_pred)
    f1 = f1_score(y_test, y_pred)

    # For loss, use `predict_proba` for models that support it
    if hasattr(model, 'predict_proba'):
        loss = log_loss(y_test, model.predict_proba(X_test))
    else:
        loss = None  # For models like SVM that don't have predict_proba

    # Store the results
    results['Model'].append(model_name)
    results['Accuracy'].append(accuracy)
    results['Precision'].append(precision)
    results['Recall'].append(recall)
    results['F1 Score'].append(f1)
    results['Loss'].append(loss)

# Convert results to numpy arrays for easier plotting
models = results['Model']
accuracies = results['Accuracy']
losses = results['Loss']

# Plot accuracy comparison
plt.figure(figsize=(10, 6))
plt.bar(models, accuracies, color='skyblue')
plt.xlabel('Model')
plt.ylabel('Accuracy')
plt.title('Model Accuracy Comparison')
plt.xticks(rotation=45)
plt.tight_layout()
plt.show()

# Plot loss comparison (handle None values)
plt.figure(figsize=(10, 6))
losses = [loss if loss is not None else 0 for loss in losses]  # Replace None with 0 for plotting
plt.bar(models, losses, color='lightcoral')
plt.xlabel('Model')
plt.ylabel('Loss')
plt.title('Model Loss Comparison')
plt.xticks(rotation=45)
plt.tight_layout()
plt.show()

# Optional: Print results in a table format
import pandas as pd

df = pd.DataFrame(results)
print(df)

